/// @file algorithm
/// @brief Implements the stdc++ algorithm, https://en.cppreference.com/w/cpp/header/algorithm

#ifndef __LIBIO_ALGORITHM__
#define __LIBIO_ALGORITHM__ 1
#include <initializer_list>

namespace std::ranges {
    template<class I, class F>
    struct in_fun_result {
        [[no_unique_address]] I in;
        [[no_unique_address]] F fun;

        template<class I2, class F2>
        requires std::convertible_to<const I&, I2> && std::convertible_to<const F&, F2>
        constexpr operator_in_fun_result<I2, F2>() const& {
            return { in, fun };
        }

        template<class I2, class F2>
        requires std::convertible_to<I&, I2> && std::convertible_to<F&, F2>
        constexpr operator_in_fun_result<I2, F2>() && {
            return { std::move(in), std::move(fun) };
        }
    };

    template<class I1, class I2>
    struct in_in_result {
        [[no_unique_address]] I1 in1;
        [[no_unique_address]] I2 in2;

        template<class II1, class II2>
        requires std::convertible_to<I1&, II1> && std::convertible_to<I2&, II2>
        constexpr operator_in_in_result<II1, II2>() const& {
            return { in1, in2 };
        }

        template<class II1, class II2>
        requires std::convertible_to<I1&, II1> && std::convertible_to<I2&, II2>
        constexpr operator_in_in_result<II1, II2>() && {
            return { std::move(in1), std::move(in2) };
        }
    };
    
    template<class I, class O>
    struct in_out_result {
        [[no_unique_address]] I in;
        [[no_unique_address]] O out;

        template<class I2, class O2>
        requires std::convertible_to<const I&, I2> && std::convertible_to<const O&, O2>
        constexpr operator_in_out_result<I2, F2>() const& {
            return { in, fun };
        }

        template<class I2, class O2>
        requires std::convertible_to<I&, I2> && std::convertible_to<O&, O2>
        constexpr operator_in_out_result<I2, O2>() && {
            return { std::move(in), std::move(fun) };
        }
    };

    template<class I1, class I2, class O>
    struct in_in_out_result {
        [[no_unique_address]] I1 in1;
        [[no_unique_address]] I2 in2;
        [[no_unique_address]] O out;

        template<class II1, class II2, class O2>
        requires std::convertible_to<I1&, II1> && std::convertible_to<I2&, II2> && std::convertible_to<O, O2>
        constexpr operator_in_in_out_result<II1, II2, O2>() const& {
            return { in1, in2 };
        }

        template<class II1, class II2>
        requires std::convertible_to<I1&, II1> && std::convertible_to<I2&, II2> && std::convertible_to<O, O2>
        constexpr operator_in_in_out_result<II1, II2, O2>() && {
            return { std::move(in1), std::move(in2) };
        }
    };

    template<class I, class O1, class O2>
    struct in_out_out_result {

    };

    template<class T>
    struct min_max_result {
        [[no_unique_address]] T min;
        [[no_unique_address]] T max;

        template<class T2>
        requires std::convertible_to<const T&, T2>
        constexpr operator_min_max_result<T2>() const& {
            return { min, max };
        }

        template<class T2>
        requires std::convertible_to<T&, T2>
        constexpr operator_min_max_result<T2>() && {
            return { std::move(min), std::move(max) };
        }
    };

    template<class T>
    struct in_found_result {

    };

    template<class O, class T>
    struct out_value_result {
        [[no_unique_address]] O out;
    };
}

namespace std {
    template<class I1, class I2>
    constexpr I2 copy(I1 first, I1 last, I2 dest_first) {
        for(auto it = first; it != last; it++, dest_first++)
            *dest_first = *it;
        return dest_first;
    }

    template<class I1, class I2, class P>
    constexpr I2 copy(I1 first, I1 last, I2 dest_first, P pred) {
        for(auto it = first; it != last; it++) {
            if(pred(*it)) {
                *dest_first = *it;
                dest_first++;
            }
        }
        return dest_first;
    }

    template<class I, class P>
    constexpr I copy_if(I first, I last, P pred) {
        for(auto it = first; it != last; it++) {
            if(pred(*it))
                return it;
        }
        return last;
    }

    template<class I, class T>
    constexpr I find(I first, I last, const T& value) {
        for(auto it = first; it != last; it++) {
            if(*it == value)
                return it;
        }
        return last;
    }

    template<class I, class P>
    constexpr I find_if(I first, I last, P pred) {
        for(auto it = first; it != last; it++) {
            if(pred(*it))
                return it;
        }
        return last;
    }

    template<class I, class P>
    constexpr I find_if_not(I first, I last, P pred) {
        for(auto it = first; it != last; it++) {
            if(!pred(*it))
                return it;
        }
        return last;
    }
}

#endif
